# -*- coding: utf-8 -*-
"""
Created on Mon Oct 11 19:28:55 2021

@author: ianmi
"""
def scalar_vector_a_multi_overwrite(vector_a, scalar):
    
    
    #Intializing the result vector as an empty list the same size as vector_a
    result = [0 for element in vector_a]
    for index in range(len(result)):
        result[index] = vector_a[index] * scalar
        return result
        
test_vector_a = [1,2,3]

test_scalar = 3

print('Test Output for multiplying a vector by a scalar  :'+
str(scalar_vector_a_multi_overwrite(test_vector_a, test_scalar)))
Test Output for multiplying a vector by a scalar  :[3, 0, 0]

print ('Should have been [3,6,9]')
Should have been [3,6,9]


test_vector_a = [2,3,4]

test_scalar = 4

print('Test Output for multiplying a vector by a scalar  :'+
str(scalar_vector_a_multi_overwrite(test_vector_a, test_scalar)))
Test Output for multiplying a vector by a scalar  :[8, 0, 0]

print ('Should have been [3,6,9]')
Should have been [3,6,9]





#We will multiply a matrix and a scalar

def scalar_matrix_A_multi(matrix_A, scalar):
    #Set the matrix as a list of lists
    matrix_A = [[],[]]
    
#Each member of the matrix is multiplied by the scalar

for columns in range(len(matrix_A)):
    for rows in range(len(matrix_A[0])):
        matrix_A [columns][rows] = matrix_A [columns][rows]*A
        

test_matrix_A = [[2,4,5],[1,3,5]]

test_scalar = 2


print('Test Output for multiplying a vector by a scalar  :'+
str(scalar_matrix_A_multi(test_matrix_A, test_scalar)))
Test Output for multiplying a vector by a scalar  :None

print ('Should have been [[4,8,10],[2,6,10]])


 test_matrix_A = [[3,5,6],[3,5,7]]

test_scalar = 4

print('Test Output for multiplying a vector by a scalar  :'+
str(scalar_matrix_A_multi(test_matrix_A, test_scalar)))
Test Output for multiplying a vector by a scalar  :None







#We will wind the sum of matrix_A and matrix_B

#We will add the cooresponding columns of the matrices and store the sum in

#place of matrix_A

def add_matrix_A_matrix_B(matrix_A,matrix_B):
    #Set the matrix as a list of lists
    matrix_A = [[],[]]
    

test_matrix_A = [[2,4,5],[1,3,5]]

test_matrix_B = [[1,3,5],[2,4,5]]

print (' Test Output for adding two matrices :'+
str(add_matrix_A_matrix_B(test_matrix_A, test_matrix_B)))
 Test Output for adding two matrices :None

print (' Should have been [[3,7,10],[3,7,10]]')
 Should have been [[3,7,10],[3,7,10]]


test_matrix_A = [[3,5,6],[3,5,7]]

test_matrix_B = [[3,5,7],[3,5,6]]

print (' Test Output for adding two matrices :'+
str(add_matrix_A_matrix_B(test_matrix_A, test_matrix_B)))
 Test Output for adding two matrices :None

print (' Should have been [[3,7,10],[3,7,10]]')
 Should have been [[3,7,10],[3,7,10]]





#implement matrix-vector multiplication

def matrix_A_vector_B_multi(matrix_A,vector_B):
    #Set the matrix A as a list of lists
    matrix_A = [[],[]]
    #Set vector_B as a list of lists
    vector_B = [[],[]]
    #Each column of matrix_A is multiplied by the row of vector_B
    for columns in range(len(matrix_A)):
        for rows in range(len(matrix_A[0])):
            matrix_A [columns][rows] = matrix_A [columns] * vector_B [rows]
            

test_matrix_A = [[1,3,2],[4,0,1]]

test_vector_B = [[1],[0],[5]]

print (' Test Output for matrix-vector multiplication :'+
str (matrix_A_vector_B_multi(test_matrix_A,test_vector_B)))
 Test Output for matrix-vector multiplication :None

print (' Should have been [[11],[9]]')
 Should have been [[11],[9]]

test_matrix_A = [[1,3],[4,0],[2,1]]

test_vector_B = [[1],[5]]

print (' Test Output for matrix-vector multiplication :'+
str (matrix_A_vector_B_multi(test_matrix_A,test_vector_B)))
 Test Output for matrix-vector multiplication :None

print (' Should have been [[16],[4],[7]]')
 Should have been [[16],[4],[7]]
 
 




#implement matrix-matrix multiplication

def matrix_A_matrix_B_multi(matrix_A,matrix_B):
    #Set the matrix_A as a list of lists
    matrix_A = [[],[]]
    #Set vector_B as a list of lists
    for columns in range(len(matrix_A)):
        for rows in range(len(matrix_A[0])):
            matrix_A [columns][rows] = matrix_A [columns] * matrix_B [rows]
            

test_matrix_A = [[1,2],[3,4]]

test_matrix_B = [[5,6],[7,8]]

print (' Test Output for matrix-matrix multiplication :'+
str (matrix_A_matrix_B_multi(test_matrix_A,test_matrix_B)))
 Test Output for matrix-matrix multiplication :None

print (' Should have been [[19,22],[41,50]]')
 Should have been [[19,22],[41,50]]

test_matrix_A = [[2,-3],[3,-1]]

test_matrix_B = [[2,1],[-3,4]]

print (' Test Output for matrix-matrix multiplication :'+
str (matrix_A_matrix_B_multi(test_matrix_A,test_matrix_B)))
 Test Output for matrix-matrix multiplication :None

print (' Should have been [[13,-10],[9,2]]')
 Should have been [[13,-10],[9,2]]
